* Photomongo Code Setup

Photomongo requires Python 3. I recommend configured a virtualenv,
and install requirements.

For my setup the directory structure is a bit backwards for now. 
I created a directory structure like this

#+begin_src
mkdir -p $HOME/proj/face_detect/
cd $HOME/proj/face_detect/
git clone git@github.com:anielsen001/photomongo.git
git clone https://github.com/davisking/dlib.git
git clone git@github.com:anielsen001/face_recognition.git
virtualenv --python=python3 $HOME/proj/face_detect/
#+end_src

** build dlib 

Follow the instructions for dlib, essentially this:

#+begin_src
cd dlib
mkdir build; cd build; cmake .. -DUSE_AVX_INSTRUCTIONS=1; cmake --build .
#+end_src

To compile with CUDA support, you have to specify the path to CUDA and the path to the CUDA library. The path to the nvcc executable must be set on the PATH environment variable also:
#+begin_src
export PATH="/usr/lib/cuda-10.0/bin":$PATH
cmake .. -DUSE_AVX_INSTRUCTIONS=1 -DCMAKE_PREFIX_PATH=/usr/lib/cuda-10.0 -DCUDA_TOOLKIT_ROOT_DIR=/usr/lib/cuda-10.0 -DCUDA_CUDA_LIBRARY= -DCUDA_NVCC_EXECUTABLE=/usr/lib/cuda-10.0/bin/nvcc -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 -DCMAKE_VERBOSE_MAKEFILE=ON
cmake --build .
#+end_src

To build the python bindings, run
#+begin_src
python setup.py install --yes USE_AVX_INSTRUCTIONS
#+end_src

** face_recognition

#+begin_src
python setup.py install
#+end_src

This may install dlib also.

** other python requirements

#+begin_src
pip install -r requirements.txt
#+end_src

* Photomongo configuration

** gmail configuration

This is optional. If you don't want to do it, leave this section out
of the configuration file.

Before running, the client_secret.json file needs to be save from the 
google developers site
https://console.developers.google.com/
select "credentials"
either select existing credentials or create new credentials, download 
the json file and save as client_secret.json in the current working 
directory.

#+begin_src
python quickstart.py --noauth_local_webserver
#+end_src

You will have to cut and paste between the terminal and the web
browser to configure things. 

** create working directories

*** known photos

#+begin_src
mkdir -p $HOME/data/photos/known 
#+end_src

Put known photos with a single face per file into the 'known' directory.

*** results

#+begin_src
mkdir -p $HOME/data/photos/match
#+end_src

** configuration file

Edit the configuration file as needed:

#+begin_src
emacs mongo.conf
#+end_src


* Run photomongo

#+begin_src
python photomongo.py mongo.conf --since=1 --progress-bar
#+end_src

* Configure crontab

Because I used a virtual environment for python, I created a 
wrapper shell script that could be run independently as a single
command and used this as my command to crontab.
#+begin_src
photomongo_cron.sh
#+end_src

I added this line to my crontab to run every night at 2am
#+begin_src
0 2 * * * /home/me/proj/face_detect/photomongo/photomongo_cron.sh
#+end_src

* capture python environment

To save the python environment into a requirements.txt file, use pipreqs which can be installed via pip. pipreqs will save just what's needed based on the import lines in the python code.

#+Begin_src
pipreqs . --force
#+end_src

